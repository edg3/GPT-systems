**Scope of Training**\nMy scope of training is using documentation at [GodotEngine.org](https://docs.godotengine.org/en/stable/) for **4.3** as of 2024-10-06. Sections used as proof of concept are **About** (Introduction alone) and **Getting Started** (Step by step, Nodes and Scenes)\nMore data will be compiled in the future, this is just a proof of concept.\nIt's a fun, interesting brain child of Ernest "edg3" L. Whom welcomes tips, suggestions, and improvements I can add in the future. The idea is simple: make a GPT focused on Godot 4.3 as a whole, C# or GDScript.\n*All images are from [docs.godotengine.org](https://docs.godotengine.org/en/stable/getting_started/introduction/introduction_to_godot.html), I will remove them, this is a test.*\n
**Introduction**\n```GDScript\nfunc _ready():\n	print("Hello world!")\n```\nWelcome to the official documentation of Godot Engine, the free and open source community-driven 2D and 3D game engine! Behind this mouthful, you will find a powerful yet user-friendly tool that you can use to develop any kind of game, for any platform and with no usage restriction whatsoever.\nThis page gives a broad overview of the engine and of this documentation, so that you know where to start if you are a beginner or where to look if you need information on a specific feature.
**Before you start***\nThe [Tutorials and resources](https://docs.godotengine.org/en/stable/community/tutorials.html#doc-community-tutorials) page lists video tutorials contributed by the community. If you prefer video to text, consider checking them out. Otherwise, [Getting Started](https://docs.godotengine.org/en/stable/getting_started/introduction/index.html#doc-getting-started-intro) is a great starting point.\nIn case you have trouble with one of the tutorials or your project, you can find help on the various [Community channels](https://godotengine.org/community/), especially the [Godot Discord](https://discord.gg/bdcfAYM4W9) community and [Forum](https://forum.godotengine.org/).
**About Godot Engine**\nA game engine is a complex tool and difficult to present in a few words. Here's a quick synopsis, which you are free to reuse if you need a quick write-up about Godot Engine:\nGodot Engine is a feature-packed, cross-platform game engine to create 2D and 3D games from a unified interface. It provides a comprehensive set of common tools, so that users can focus on making games without having to reinvent the wheel. Games can be exported with one click to a number of platforms, including the major desktop platforms (Linux, macOS, Windows), mobile platforms (Android, iOS), as well as Web-based platforms and consoles.\nGodot is completely free and open source under the [permissive MIT license](https://docs.godotengine.org/en/stable/about/complying_with_licenses.html#doc-complying-with-licenses). No strings attached, no royalties, nothing. Users' games are theirs, down to the last line of engine code. Godot's development is fully independent and community-driven, empowering users to help shape their engine to match their expectations. It is supported by the [Godot Foundation](https://godot.foundation/) not-for-profit.
**Organization of the documentation**\nThis documentation is organized into several sections:\n- **About** contains this introduction as well as information about the engine, its history, its licensing, authors, etc. It also contains the [Frequently asked questions](https://docs.godotengine.org/en/stable/about/faq.html#doc-faq).\n- **Getting Started** contains all necessary information on using the engine to make games. It starts with the [Step by step](https://docs.godotengine.org/en/stable/getting_started/step_by_step/index.html#toc-learn-step-by-step) tutorial which should be the entry point for all new users. **This is the best place to start if you're new!**\n- **The Manual** can be read or referenced as needed, in any order. It contains feature-specific tutorials and documentation.\n- **Contributing** gives information related to contributing to Godot, whether to the core engine, documentation, demos or other parts. It describes how to report bugs, how contributor workflows are organized, etc. It also contains sections intended for advanced users and contributors, with information on compiling the engine, contributing to the editor, or developing C++ modules.\n- **Community** is dedicated to the life of Godot's community and contains a list of recommended third-party tutorials and materials outside of this documentation. It also provides details on the Asset Library. It also used to list Godot communities, which are now listed on the [Godot website](https://godotengine.org/community/).\n-Finally, the **Class reference** documents the full Godot API, also available directly within the engine's script editor. You can find information on all classes, functions, signals and so on here.\nIn addition to this documentation, you may also want to take a look at the various [Godot demo projects](https://github.com/godotengine/godot-demo-projects).
**About this documentation**\nMembers of the Godot Engine community continuously write, correct, edit, and improve this documentation. We are always looking for more help. You can also contribute by opening Github issues or translating the documentation into your language. If you are interested in helping, see [Ways to contribute](https://docs.godotengine.org/en/stable/contributing/how_to_contribute.html#doc-ways-to-contribute) and [Writing documentation](https://docs.godotengine.org/en/stable/contributing/documentation/index.html#doc-contributing-writing-documentation), or get in touch with the [Documentation team](https://godotengine.org/teams/#documentation) on [Godot Contributors Chat](https://chat.godotengine.org/).\nAll documentation content is licensed under the permissive Creative Commons Attribution 3.0 ([CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)) license, with attribution to "*Juan Linietsky, Ariel Manzur, and the Godot Engine community*" unless otherwise noted.\n*Have fun reading and making games with Godot Engine!*
**Introduction**\nThis series will introduce you to Godot and give you an overview of its features.\nIn the following pages, you will get answers to questions such as "Is Godot for me?" or "What can I do with Godot?". We will then introduce the engine's most essential concepts, run you through the editor's interface, and give you tips to make the most of your time learning it.\n- [Introduction to Godot](https://docs.godotengine.org/en/stable/getting_started/introduction/introduction_to_godot.html)\n- [Learn to code with GDScript](https://docs.godotengine.org/en/stable/getting_started/introduction/learn_to_code_with_gdscript.html)\n- [Overview of Godot's key concepts](https://docs.godotengine.org/en/stable/getting_started/introduction/key_concepts_overview.html)\n- [First look at Godot's interface](https://docs.godotengine.org/en/stable/getting_started/introduction/first_look_at_the_editor.html)\n- [Learning new features](https://docs.godotengine.org/en/stable/getting_started/introduction/learning_new_features.html)\n- [Godot's design philosophy](https://docs.godotengine.org/en/stable/getting_started/introduction/godot_design_philosophy.html)
**Introduction to Godot**\nThis article is here to help you figure out whether Godot might be a good fit for you. We will introduce some broad features of the engine to give you a feel for what you can achieve with it and answer questions such as "what do I need to know to get started?".\nThis is by no means an exhaustive overview. We will introduce many more features in this getting started series.\n**What is Godot?**Godot is a general-purpose 2D and 3D game engine designed to support all sorts of projects. You can use it to create games or applications you can then release on desktop or mobile, as well as on the web.\nYou can also create console games with it, although you either need strong programming skills or a developer to port the game for you.\n**Note:**The Godot team can't provide an open source console export due to the licensing terms imposed by console manufacturers. Regardless of the engine you use, though, releasing games on consoles is always a lot of work. You can read more on that here: [Console support in Godot](https://docs.godotengine.org/en/stable/tutorials/platform/consoles.html#doc-consoles).
**What can the engine do?**\nGodot was initially developed in-house by an Argentinian game studio. Its development started in 2001, and the engine was rewritten and improved tremendously since its open source release in 2014.\nSome examples of games created with Godot include Ex-Zodiac and Helms of Fury.\n![../../_images/introduction_ex_zodiac.png](https://docs.godotengine.org/en/stable/_images/introduction_ex_zodiac.png "introduction_ex_zodiac.png")\n![../../_images/introduction_helms_of_fury.jpg](https://docs.godotengine.org/en/stable/_images/introduction_helms_of_fury.jpg "introduction_helms_of_fury.jpg")\nAs for applications, the open source pixel art drawing program Pixelorama is powered by Godot, and so is the voxel RPG creator RPG in a box.\n![../../introduction_rpg_in_a_box.png](https://docs.godotengine.org/en/stable/_images/introduction_rpg_in_a_box.png "introduction_rpg_in_a_box.png")\nYou can find many more examples in the [official showcase videos](https://www.youtube.com/playlist?list=PLeG_dAglpVo6EpaO9A1nkwJZOwrfiLdQ8).
**How does it work and look?**\nGodot comes with a fully-fledged game editor with integrated tools to answer the most common needs. It includes a code editor, an animation editor, a tilemap editor, a shader editor, a debugger, a profiler, and more.\n![../../introduction_editor.webp](https://docs.godotengine.org/en/stable/_images/introduction_editor.webp "introduction_editor.webp")\nThe team strives to offer a feature-rich game editor with a consistent user experience. While there is always room for improvement, the user interface keeps getting refined.\nOf course, if you prefer, you can work with external programs. We officially support importing 3D scenes designed in [Blender](https://www.blender.org/) and maintain plugins to code in [VSCode](https://github.com/godotengine/godot-vscode-plugin) and [Emacs](https://github.com/godotengine/emacs-gdscript-mode) for GDScript and C#. We also support Visual Studio for C# on Windows.\n![../../_images/introduction_vscode.png](https://docs.godotengine.org/en/stable/_images/introduction_vscode.png "introduction_vscode.png")
**Programming languages**\nLet's talk about the available programming languages.\nYou can code your games using [GDScript](https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/index.html#toc-learn-scripting-gdscript), a Godot-specific and tightly integrated language with a lightweight syntax, or [C#](https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/index.html#toc-learn-scripting-c), which is popular in the games industry. These are the two main scripting languages we support.\nWith the GDExtension technology, you can also write gameplay or high-performance algorithms in C or C++ without recompiling the engine. You can use this technology to integrate third-party libraries and other Software Development Kits (SDK) in the engine.\nOf course, you can also directly add modules and features to the engine, as it's completely free and open source.
**What do I need to know to use Godot?**\nGodot is a feature-packed game engine. With its thousands of features, there is a lot to learn. To make the most of it, you need good programming foundations. While we try to make the engine accessible, you will benefit a lot from knowing how to think like a programmer first.\nGodot relies on the object-oriented programming paradigm. Being comfortable with concepts such as classes and objects will help you code efficiently in it.\nIf you are entirely new to programming, we recommend following the [CS50 open courseware](https://cs50.harvard.edu/x) from Harvard University. It's a great free course that will teach you everything you need to know to be off to a good start. It will save you countless hours and hurdles learning any game engine afterward.\n**Note:** In CS50, you will learn multiple programming languages. Don't be afraid of that: programming languages have many similarities. The skills you learn with one language transfer well to others.\nWe will provide you with more Godot-specific learning resources in [Learning new features](https://docs.godotengine.org/en/stable/getting_started/introduction/learning_new_features.html#doc-learning-new-features).\nIn the next part, you will get an overview of the engine's essential concepts.
**User-contributed notes**\n*Please read the [User-contributed notes policy](https://github.com/godotengine/godot-docs-user-notes/discussions/1) before submitting a comment.*
**Step by step**\nThis series builds upon the [Introduction to Godot](https://docs.godotengine.org/en/stable/getting_started/introduction/index.html#toc-learn-introduction) and will get you started with the editor and the engine. You will learn more about nodes and scenes, code your first classes with GDScript, use signals to make nodes communicate with one another, and more.\nThe following lessons are here to prepare you for [Your first 2D game](https://docs.godotengine.org/en/stable/getting_started/first_2d_game/index.html#doc-your-first-2d-game), a step-by-step tutorial where you will code a game from scratch. By the end of it, you will have the necessary foundations to explore more features in other sections. We also included links to pages that cover a given topic in-depth where appropriate.\n- [Nodes and Scenes](https://docs.godotengine.org/en/stable/getting_started/step_by_step/nodes_and_scenes.html)\n- [Creating instances](https://docs.godotengine.org/en/stable/getting_started/step_by_step/instancing.html)\n- [Scripting languages](https://docs.godotengine.org/en/stable/getting_started/step_by_step/scripting_languages.html)\n- [Creating your first script](https://docs.godotengine.org/en/stable/getting_started/step_by_step/scripting_first_script.html)\n- [Listening to player input](https://docs.godotengine.org/en/stable/getting_started/step_by_step/scripting_player_input.html)\n- [Using signals](https://docs.godotengine.org/en/stable/getting_started/step_by_step/signals.html)
**Nodes and Scenes**\nIn [Overview of Godot's key concepts](https://docs.godotengine.org/en/stable/getting_started/introduction/key_concepts_overview.html#doc-key-concepts-overview), we saw that a Godot game is a tree of scenes and that each scene is a tree of nodes. In this lesson, we explain a bit more about them. You will also create your first scene.
**Nodes**\n**Nodes are the fundamental building blocks of your game**. They are like the ingredients in a recipe. There are dozens of kinds that can display an image, play a sound, represent a camera, and much more.\n![../../nodes_and_scenes_nodes.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_nodes.webp "nodes_and_scenes_nodes.webp")\nAll nodes have the following characteristics:\n- A name.\n- Editable properties.\n- They receive callbacks to update every frame.\n- You can extend them with new properties and functions.\n- you can add them to another node as a child.\nThe last characteristic is important. Together, nodes form a tree, which is a powerful feature to organize projects. Since different nodes have different functions, combining them produces more complex behavior. As we saw before, you can build a playable character the camera follows using a [CharacterBody2D](https://docs.godotengine.org/en/stable/classes/class_characterbody2d.html#class-characterbody2d) node, a [Sprite2D](https://docs.godotengine.org/en/stable/classes/class_sprite2d.html#class-sprite2d) node, a [Camera2D](https://docs.godotengine.org/en/stable/classes/class_camera2d.html#class-camera2d) node, and a [CollisionShape2D](https://docs.godotengine.org/en/stable/classes/class_collisionshape2d.html#class-collisionshape2d) node.
**Scenes**\n![../../nodes_and_scenes_character_nodes.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_character_nodes.webp "nodes_and_scenes_character_nodes.webp")\nWhen you organize nodes in a tree, like our character, we call this construct a scene. Once saved, scenes work like new node types in the editor, where you can add them as a child of an existing node. In that case, the instance of the scene appears as a single node with its internals hidden.\nScenes allow you to structure your game's code however you want. You can **compose nodes** to create custom and complex node types, like a game character that runs and jumps, a life bar, a chest with which you can interact, and more.\n![../../nodes_and_scenes_3d_scene_example.png](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_3d_scene_example.png "nodes_and_scenes_3d_scene_example.png")\nThe Godot editor essentially is a **scene editor**. It has plenty of tools for editing 2D and 3D scenes, as well as user interfaces. A Godot project can contain as many of these scenes as you need. The engine only requires one as your application's main scene. This is the scene Godot will first load when you or a player runs the game.\nOn top of acting like nodes, scenes have the following characteristics:\n- They always have one root node, like the "Player" in our example.\n- You can save them to your local drive and load them later.\n- You can create as many instances of a scene as you'd like. You could have five or ten characters in your game, created from your Character scene.
**Creating your first scene**\nLet's create our first scene with a single node. To do so, you will need to [create a new project](https://docs.godotengine.org/en/stable/tutorials/editor/project_manager.html#doc-creating-and-importing-projects) first. After opening the project, you should see an empty editor.\n![../../nodes_and_scenes_01_empty_editor.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_01_empty_editor.webp "nodes_and_scenes_01_empty_editor.webp")\nIn an empty scene, the Scene dock on the left shows several options to add a root node quickly. "2D Scene" adds a [Node2D](https://docs.godotengine.org/en/stable/classes/class_node2d.html#class-node2d) node, "3D Scene" adds a [Node3D](https://docs.godotengine.org/en/stable/classes/class_node3d.html#class-node3d) node, and "User Interface" adds a [Control](https://docs.godotengine.org/en/stable/classes/class_control.html#class-control) node. These presets are here for convenience; they are not mandatory. "Other Node" lets you select any node to be the root node. In an empty scene, "Other Node" is equivalent to pressing the "Add Child Node" button at the top-left of the Scene dock, which usually adds a new node as a child of the currently selected node.\nWe're going to add a single [Label](https://docs.godotengine.org/en/stable/classes/class_label.html#class-label) node to our scene. Its function is to draw text on the screen.\nPress the "Add Child Node" button or "Other Node" to create a root node.\n![../../nodes_and_scenes_02_scene_dock.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_02_scene_dock.webp "nodes_and_scenes_02_scene_dock.webp")\nThe Create Node dialog opens, showing the long list of available nodes.\n!../../nodes_and_scenes_03_create_node_window.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_03_create_node_window.webp "nodes_and_scenes_03_create_node_window.webp")\nSelect the Label node. You can type its name to filter down the list.\n!../../nodes_and_scenes_04_create_label_window.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_04_create_label_window.webp "nodes_and_scenes_04_create_label_window.webp")\nClick on the Label node to select it and click the Create button at the bottom of the window.\n![../../nodes_and_scenes_05_editor_with_label.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_05_editor_with_label.webp "nodes_and_scenes_05_editor_with_label.webp")\nA lot happens when you add a scene's first node. The scene changes to the 2D workspace because Label is a 2D node type. The Label appears, selected, in the top-left corner of the viewport. The node appears in the Scene dock on the left, and the node's properties appear in the Inspector dock on the right.
**Changing a node's properties**\nThe next step is to change the Label's "Text" property. Let's change it to "Hello World".\nHead to the Inspector dock on the right of the viewport. Click inside the field below the Text property and type "Hello World".\n![../../nodes_and_scenes_06_label_text.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_06_label_text.webp "nodes_and_scenes_06_label_text.webp")\nYou will see the text draw in the viewport as you type.\n**Note:** You can edit any property listed in the Inspector as we did with the Text. For a complete reference of the Inspector dock, see [The Inspector](https://docs.godotengine.org/en/stable/tutorials/editor/inspector_dock.html#doc-editor-inspector-dock).\nYou can move your Label node in the viewport by selecting the move tool in the toolbar.\n![../../nodes_and_scenes_07_move_tool.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_07_move_tool.webp "nodes_and_scenes_07_move_tool.webp")\nWith the Label selected, click and drag anywhere in the viewport to move it to the center of the view delimited by the rectangle.\n![../../nodes_and_scenes_08_hello_world_text.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_08_hello_world_text.webp "nodes_and_scenes_08_hello_world_text.webp")
**Running the scene**\nEverything's ready to run the scene! Press the Play Scene button in the top-right of the screen or press ```F6``` (```Cmd + R``` on macOS).\n!../../nodes_and_scenes_09_play_scene_button.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_09_play_scene_button.webp "nodes_and_scenes_09_play_scene_button.webp")\nA popup invites you to save the scene, which is required to run it. Click the Save button in the file browser to save it as ```label.tscn```.\n![../../nodes_and_scenes_10_save_scene_as.webp(https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_10_save_scene_as.webp "nodes_and_scenes_10_save_scene_as.webp")]\n**Note:** The Save Scene As dialog, like other file dialogs in the editor, only allows you to save files inside the project. The ```res://``` path at the top of the window represents the project's root directory and stands for "resource path". For more information about file paths in Godot, see [File system](https://docs.godotengine.org/en/stable/tutorials/scripting/filesystem.html#doc-filesystem).\nThe application should open in a new window and display the text "Hello World".\n![../../nodes_and_scenes_11_final_result.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_11_final_result.webp "nodes_and_scenes_11_final_result.webp")\nClose the window or press ```F8``` (```Cmd + .``` on macOS) to quit the running scene.
**Setting the main scene**\nTo run our test scene, we used the Run Current Scene button. Another button next to it allows you to set and run the project's main scene. You can press ```F5``` (```Cmd + B``` on macOS) to do so.\n![../../nodes_and_scenes_12_play_button.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_12_play_button.webp "nodes_and_scenes_12_play_button.webp")\nA popup window appears and invites you to select the main scene.\n![../../nodes_and_scenes_13_main_scene_popup.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_13_main_scene_popup.webp "nodes_and_scenes_13_main_scene_popup.webp")\nClick the Select button, and in the file dialog that appears, double click on ```label.tscn```.\n![../../nodes_and_scenes_14_select_main_scene.webp](https://docs.godotengine.org/en/stable/_images/nodes_and_scenes_14_select_main_scene.webp "nodes_and_scenes_14_select_main_scene.webp")\nThe demo should run again. Moving forward, every time you run the project, Godot will use this scene as a starting point.\n**Note:** The editor saves the main scene's path in a project.godot file in your project's directory. While you can edit this text file directly to change project settings, you can also use the "Project -> Project Settings" window to do so. For more information, see [Project Settings](https://docs.godotengine.org/en/stable/tutorials/editor/project_settings.html#doc-project-settings).\nIn the next part, we will discuss another key concept in games and in Godot: creating instances of a scene.